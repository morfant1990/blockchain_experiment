/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.masterdegree.smartcontractapp;

import edu.masterdegree.smartcontractapp.ethereum.SellTerritory;
import edu.masterdegree.smartcontractapp.ethereum.Territory;
import edu.masterdegree.smartcontractapp.models.AddsTableModel;
import edu.masterdegree.smartcontractapp.models.SellTerritoryPOJO;
import edu.masterdegree.smartcontractapp.models.SellTerritoryRow;
import edu.masterdegree.smartcontractapp.models.TerritoryContractWrapperRowImpl;
import edu.masterdegree.smartcontractapp.models.TerritoryTableModel;
import java.io.IOException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.Contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import net.miginfocom.swing.MigLayout;
import org.web3j.protocol.core.methods.response.TransactionReceipt;

/**
 *
 * @author morfa_000
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPannel = new javax.swing.JTabbedPane();
        orderSearchPanel = new javax.swing.JPanel();
        buyButton = new javax.swing.JButton();
        buyAddPanel = new javax.swing.JScrollPane();
        buyAddTable = new javax.swing.JTable();
        myOrdersPanel = new javax.swing.JPanel();
        addAddButton = new javax.swing.JButton();
        scrollForAdds = new javax.swing.JScrollPane();
        addsTable = new javax.swing.JTable();
        terriroyPanel = new javax.swing.JPanel();
        addTerritoryButton = new javax.swing.JButton();
        scrollForTerritoriesTable = new javax.swing.JScrollPane();
        territoriesTable = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        mainMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buyButton.setText("Купить");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        buyAddTable.setModel(new AddsTableModel());
        buyAddPanel.setViewportView(buyAddTable);

        javax.swing.GroupLayout orderSearchPanelLayout = new javax.swing.GroupLayout(orderSearchPanel);
        orderSearchPanel.setLayout(orderSearchPanelLayout);
        orderSearchPanelLayout.setHorizontalGroup(
            orderSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(orderSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buyAddPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE)
                    .addGroup(orderSearchPanelLayout.createSequentialGroup()
                        .addComponent(buyButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        orderSearchPanelLayout.setVerticalGroup(
            orderSearchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderSearchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buyAddPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPannel.addTab("Поиск объявлений", orderSearchPanel);

        addAddButton.setText("Добавить объявление");
        addAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAddButtonActionPerformed(evt);
            }
        });

        addsTable.setModel(new AddsTableModel()
        );
        scrollForAdds.setViewportView(addsTable);

        javax.swing.GroupLayout myOrdersPanelLayout = new javax.swing.GroupLayout(myOrdersPanel);
        myOrdersPanel.setLayout(myOrdersPanelLayout);
        myOrdersPanelLayout.setHorizontalGroup(
            myOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myOrdersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(myOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollForAdds, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE)
                    .addGroup(myOrdersPanelLayout.createSequentialGroup()
                        .addComponent(addAddButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        myOrdersPanelLayout.setVerticalGroup(
            myOrdersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myOrdersPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addAddButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollForAdds, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPannel.addTab("Мои объявления", myOrdersPanel);

        addTerritoryButton.setText("Добавить территорию");
        addTerritoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTerritoryButtonActionPerformed(evt);
            }
        });

        territoriesTable.setModel(new TerritoryTableModel());
        scrollForTerritoriesTable.setViewportView(territoriesTable);

        javax.swing.GroupLayout terriroyPanelLayout = new javax.swing.GroupLayout(terriroyPanel);
        terriroyPanel.setLayout(terriroyPanelLayout);
        terriroyPanelLayout.setHorizontalGroup(
            terriroyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(terriroyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(terriroyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollForTerritoriesTable, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE)
                    .addGroup(terriroyPanelLayout.createSequentialGroup()
                        .addComponent(addTerritoryButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        terriroyPanelLayout.setVerticalGroup(
            terriroyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(terriroyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addTerritoryButton)
                .addGap(18, 18, 18)
                .addComponent(scrollForTerritoriesTable, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPannel.addTab("Существующие территории", terriroyPanel);

        tabPannel.setSelectedIndex(2);

        mainMenu.setText("Меню");
        menuBar.add(mainMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPannel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPannel)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addTerritoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTerritoryButtonActionPerformed
        try {
            Web3j web3j = Web3j.build(new HttpService());
            log.info("Connected to Ethereum client version: "
                    + web3j.web3ClientVersion().send().getWeb3ClientVersion());
            Credentials credentials
                    = WalletUtils.loadCredentials(
                            currentUserPassword,
                            currentUserKeyStore);
            log.info("Credentials loaded");
            log.info("Sending Ether ..");

            // Now lets deploy a smart contract
            log.info("Deploying smart contract");
            
            Territory territory = Territory.
                    deploy(web3j, credentials, BigInteger.ZERO, Contract.GAS_LIMIT, UUID.randomUUID().toString()).
                    send();
            String contractAddress = territory.getContractAddress();
            log.info("Smart contract deployed to address " + contractAddress);
            
            territories.add(territory);
            
            ((TerritoryTableModel) territoriesTable.getModel()).addRow(new TerritoryContractWrapperRowImpl(territory));
        } catch (Exception ex) {
            log.error("Communication fail with error = ", ex);
        }

    }//GEN-LAST:event_addTerritoryButtonActionPerformed

    private void addAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAddButtonActionPerformed
        JTextField nameField = new JTextField(15);
        JTextField descriptionField = new JTextField(15);
        SpinnerNumberModel spinnerNumberModel = new SpinnerNumberModel(100, 1, Integer.MAX_VALUE, 100);
        JSpinner priceSpinner = new JSpinner(spinnerNumberModel);
        
        List<String> terIDs = new ArrayList<>();
        for (Territory territory : territories) {
            try {
                terIDs.add(territory.getTerritoryID().send());
            } catch (Exception ex) {
                log.error("Error = ", ex);
            }
        }
        
        JComboBox<String> territoryCombobox = new JComboBox<>(terIDs.toArray(new String[0]));
        JPanel myPanel = new JPanel();
        myPanel.setLayout(new MigLayout("fillx"));
        
        myPanel.add(new JLabel("Имя:"));
        myPanel.add(nameField, "wrap");
        myPanel.add(new JLabel("Описание:"));
        myPanel.add(descriptionField, "wrap");
        myPanel.add(new JLabel("Цена:"));
        myPanel.add(priceSpinner, "wrap");
        myPanel.add(new JLabel("Территория:"));
        myPanel.add(territoryCombobox);
        
        int result = JOptionPane.showConfirmDialog(null, myPanel,
                "Новый контракт", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            try {
                System.out.println("Name: " + nameField.getText());
                System.out.println("Description: " + descriptionField.getText());
                System.out.println("Price: " + new BigInteger(priceSpinner.getValue().toString()));
                System.out.println("TerritoriID: " + territoryCombobox.getSelectedItem());
                System.out.println("TerritoryContractID: " + searchTerritoryContractIDByTerritoryID((String) territoryCombobox.getSelectedItem()));
                System.out.println("UserID: " + currentUser);
                
                Web3j web3j = Web3j.build(new HttpService());
                log.info("Connected to Ethereum client version: "
                        + web3j.web3ClientVersion().send().getWeb3ClientVersion());
                Credentials credentials
                        = WalletUtils.loadCredentials(
                                currentUserPassword,
                                currentUserKeyStore);
                log.info("Credentials loaded");
                log.info("Sending Ether ..");

                // Now lets deploy a smart contract
                log.info("Deploying smart contract");
                
                String territoryContractAdress = searchTerritoryContractIDByTerritoryID((String) territoryCombobox.getSelectedItem());
                
                Territory territory = Territory.load(territoryContractAdress, web3j, credentials, BigInteger.ZERO, Contract.GAS_LIMIT);
                log.info("Load contract in same transaction = " + territory.getContractAddress());
                
                SellTerritory sellTerritory = SellTerritory.
                        deploy(web3j, credentials, BigInteger.ZERO, Contract.GAS_LIMIT,
                                nameField.getText(),
                                descriptionField.getText(),
                                currentUser,
                                territory.getContractAddress(),
                                new BigInteger(priceSpinner.getValue().toString())).
                        send();
                String contractAddress = sellTerritory.getContractAddress();
                log.info("Smart contract deployed to address " + contractAddress);
                
                ((AddsTableModel) addsTable.getModel()).addRow(new SellTerritoryRow(new SellTerritoryPOJO(sellTerritory)));
                ((AddsTableModel) buyAddTable.getModel()).addRow(new SellTerritoryRow(new SellTerritoryPOJO(sellTerritory)));
                
                adds.add(new SellTerritoryPOJO(sellTerritory));
                
            } catch (Exception ex) {
                log.error("Error = ", ex);
            }
        }
    }//GEN-LAST:event_addAddButtonActionPerformed

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        int selectedRow = buyAddTable.getSelectedRow();
        if (selectedRow == -1) {
            return;
        }
        try {
            SellTerritoryPOJO sellTerritoryPOJO = adds.get(selectedRow);
            
            Web3j web3j = Web3j.build(new HttpService());
            log.info("Connected to Ethereum client version: "
                    + web3j.web3ClientVersion().send().getWeb3ClientVersion());
            Credentials credentials
                    = WalletUtils.loadCredentials(
                            anotherUserPassword,
                            anotherUserKeyStore);
            log.info("Credentials loaded");
            log.info("Sending Ether ..");

            // Now lets deploy a smart contract
            log.info("Deploying smart contract");
            
            SellTerritory sellTerritory = SellTerritory.load(sellTerritoryPOJO.getContractAddress(),
                    web3j,
                    credentials,
                    BigInteger.ZERO,
                    Contract.GAS_LIMIT);
            log.debug("Try to buy" + sellTerritory.getContractAddress());
            TransactionReceipt recepiet = sellTerritory.buy(sellTerritoryPOJO.getPrice().add(new BigInteger("2300"))).send();
            log.info("Result of tx = " + recepiet.toString());
            
            
            
        } catch (Exception ex) {
            log.error("Error = ", ex);
        }
    }//GEN-LAST:event_buyButtonActionPerformed
    
    private String searchTerritoryContractIDByTerritoryID(String territoryID) throws Exception {
        
        for (Territory territory : territories) {
            if (territoryID.equals(territory.getTerritoryID().send())) {
                return territory.getContractAddress();
            }
        }
        throw new RuntimeException("Territory without contract!");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    private static final Logger log = LoggerFactory.getLogger(MainFrame.class);
    
    private List<Territory> territories = new ArrayList<>();
    private List<SellTerritoryPOJO> adds = new ArrayList<>();
    
    private String currentUser = "0x2bc9f77f9d34bfcd6779cfe9e9d07e62b7d1afb8";
    private String anotherUser = "0x62ea063a5e441250fac34852abead22ae7dee4fb";
    private String currentUserPassword = "Peer2peer1";
    private String anotherUserPassword = "Peer2peer2";
    private String currentUserKeyStore = "E:\\Ethereum\\PrivateNet\\chaindata\\keystore\\UTC--2019-05-09T15-00-49.317270500Z--2bc9f77f9d34bfcd6779cfe9e9d07e62b7d1afb8";
    private String anotherUserKeyStore = "E:\\Ethereum\\PrivateNet\\chaindata\\keystore\\UTC--2019-05-09T15-01-10.339017100Z--62ea063a5e441250fac34852abead22ae7dee4fb";
    private String keyStore = "E:\\Ethereum\\PrivateNet\\chaindata\\keystore\\";

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAddButton;
    private javax.swing.JButton addTerritoryButton;
    private javax.swing.JTable addsTable;
    private javax.swing.JScrollPane buyAddPanel;
    private javax.swing.JTable buyAddTable;
    private javax.swing.JButton buyButton;
    private javax.swing.JMenu mainMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel myOrdersPanel;
    private javax.swing.JPanel orderSearchPanel;
    private javax.swing.JScrollPane scrollForAdds;
    private javax.swing.JScrollPane scrollForTerritoriesTable;
    private javax.swing.JTabbedPane tabPannel;
    private javax.swing.JPanel terriroyPanel;
    private javax.swing.JTable territoriesTable;
    // End of variables declaration//GEN-END:variables
}
